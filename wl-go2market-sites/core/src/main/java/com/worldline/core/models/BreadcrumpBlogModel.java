package com.worldline.core.models;import com.adobe.cq.sightly.WCMUsePojo;import com.day.cq.wcm.api.Page;import com.worldline.core.exceptions.GenericException;import com.worldline.core.exceptions.PageNotFoundException;import com.worldline.core.models.util.PagePropertyUtil;import com.worldline.core.models.util.PropertyKey;import com.worldline.core.util.Validator;import org.apache.sling.commons.json.JSONException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * Created by varduhis on 7/31/2017. */public class BreadcrumpBlogModel extends WCMUsePojo {    private List<Page> pages;    private static final Logger LOG = LoggerFactory.getLogger(BreadcrumpBlogModel.class);    @Override    public void activate() {        try {            pages = new ArrayList<>();            LOG.info("Current blog page -------------> ", getCurrentPage().getPath());            Page current = getCurrentPage();            Page blogRoot = getBlogParent(current);            Page overviewPage = getOverviewPage(current, blogRoot);            pages.add(blogRoot);            LOG.info("Added blog root to breadcrump ", blogRoot.getPath());            pages.add(overviewPage);            LOG.info("Added overview page to breadcrump ", overviewPage.getPath());            pages.add(current);            LOG.info("Added blog article page to breadcrump ", current.getPath());        } catch (Exception e) {            LOG.warn(" " + e.getMessage());        }    }    private Page getOverviewPage(Page current, Page parent) throws GenericException {        String[] categories = PagePropertyUtil.initListProp(current, PropertyKey.PROP_KEY_CATEGORY);        StringBuilder exceptionMessage = new StringBuilder();        String errorMessage = "";        if (!Validator.isEmpty(categories)) {            String categoryFirst = categories[0];            LOG.info("Category tag found ", categoryFirst);            int i = categoryFirst.lastIndexOf(':');            if (i != -1) {                String overviewPageName = categoryFirst.substring(++i);                LOG.info("Overview page name is ", overviewPageName);                Iterator<Page> it = parent.listChildren();                while (it.hasNext()) {                    Page next=it.next();                    if (overviewPageName.equals(next.getName())) {                        return next;                    }                }                errorMessage = "Fail to retrieve blogoverview page with name ";                exceptionMessage.append(errorMessage);                exceptionMessage.append(overviewPageName);                exceptionMessage.append("for page:  ");                exceptionMessage.append(current.getPath());                throw new PageNotFoundException(exceptionMessage.toString());            }            errorMessage = "Fail to extract overview page name from category tag: Unresolved pattern  ";            exceptionMessage.append(errorMessage);            exceptionMessage.append(categoryFirst);            throw new GenericException(exceptionMessage.toString());        }        errorMessage = "No property categories is found for page : ";        exceptionMessage.append(errorMessage);        exceptionMessage.append(current.getPath());        throw new GenericException(exceptionMessage.toString());    }    /*    traversing upward to get blog-home     */    private Page getBlogParent(Page blogPage) throws PageNotFoundException {        if (blogPage == null) {            throw new PageNotFoundException("Fail to retrieve blog-home");        }        if (PropertyKey.BLOG.equals(blogPage.getName())) {            return blogPage;        }        return getBlogParent(blogPage.getParent());    }    public List<Page> getPages() {        return pages;    }    public void setPages(List<Page> pages) {        this.pages = pages;    }}